{% extends 'base.md.j2' %}
{% block lead_paragraph %}

This post looks a collection of useful security headers. I've tried to explain what each one does, where it can be helpful, and where it might bite you. None of these are absolutely necessary; if nothing else I strongly recommend using HSTS.

{% endblock %}
{% block content %}

## Primary Security Reference

Originally, this post was sourced from a collection of personal experience and interesting sources found during writing. However, once I split this post out, I wanted to find some best practices (my code, while certainly practice, isn't necessarily the best). The [Open Web Application Security Project](https://www.owasp.org/index.php/Main_Page) maintains [a list of useful headers](https://www.owasp.org/index.php/OWASP_Secure_Headers_Project#tab=Headers), which should all be covered here.

## Caveats

* **EVERYTHING HERE CAN BE SIDESTEPPED**. Headers are sent [with a request/response](https://tools.ietf.org/html/rfc7540#section-8.1.2), which means they can be completely ignored. Headers do not prevent bad actors from doing malicious things. They do, however, force average users to do things as expected, which usually prevents bad actors from tricking average users into doing malicious things. This is a **very** important distinction.
* I didn't include [HTTP Public Key Pinning](https://developer.mozilla.org/en-US/docs/Web/HTTP/Public_Key_Pinning) because it's pretty easy to screw up. As Let's Encrypt certs aren't necessarily as stable as commercial alternatives (i.e. may change more frequently without manual intervention), I want to do more research on this.

## Primary Header Config

I like to split the crypto config and header config. I'm always going to want to use a good algorithm, but I might not always want to use, say, `X-Frame-Options`. YMMV.

[As I said before](https://blog.wizardsoftheweb.pro/lets-encrypt-from-start-to-finish-first-steps/#reuselocation), I like `/etc/<server>/common/`, YMMV.

### Nginx

{{
    shell_session("""\
$ sudo touch /etc/nginx/common/ssl-headers.conf
"""
    )
}}

### Apache

{{
    shell_session("""\
$ sudo touch /etc/httpd/common/ssl-headers.conf
"""
    )
}}

## Force Secure Communication

As [previously mentioned](https://blog.wizardsoftheweb.pro/lets-encrypt-from-start-to-finish-overview/#hsts), HSTS ensures users use secure protocols. The HSTS header, `Strict-Transport-Security`, has three primary options:

* `max-age`: This specifies the maximum amount of time a user agent (browser) should cache the header. To make things easier, we'll give the cache a half-life of two years:

    ![63072000-origin-1](/content/images/2017/12/63072000-origin-1.png)

    Twitter uses [20 years](https://github.com/twitter/secureheaders#default-values). Most sites either use one or two years. Qualys wants to see [at least 120 days](https://blog.qualys.com/securitylabs/2016/03/28/the-importance-of-a-proper-http-strict-transport-security-implementation-on-your-web-server).

* `includeSubdomains`: Without including subdomains, there are apparently [some cookie attacks](https://www.owasp.org/index.php/HTTP_Strict_Transport_Security_Cheat_Sheet#Problems) that can still be run. However, if you explicitly cannot serve subdomain content securely, this will cause problems. Err on the side of caution but check you subdomains.

* `preload`: You can [submit your HSTS site](https://hstspreload.org/) to an external list. This is [a long-term commitment](https://hstspreload.org/#removal), so don't submit your site unless you're sure about config. I won't be using it here because of the extra steps, but I highly recommend it if you've got a stable setup.

HSTS will forcefully break your site if you don't have a proper TLS setup. Remember, it's cached by the user agent, not something you have control over. You [can nuke it](https://www.thesslstore.com/blog/clear-hsts-settings-chrome-firefox/) when necessary, but it is a hassle to do so.

### Nginx

Append `; preload` if [you're on the list](https://hstspreload.org/);

{{
    highlight_block("""\
add_header Strict-Transport-Security \"max-age=63072000; includeSubdomains\";
""",
        explicit_lexer_name = 'NginxConfLexer',
        no_header = True
    )
}}

### Apache

Append `; preload` if [you're on the list](https://hstspreload.org/);

{{
    highlight_block("""\
Header always set Strict-Transport-Security \"max-age=63072000; includeSubdomains\"
""",
        explicit_lexer_name = 'ApacheConfLexer',
        no_header = True
    )
}}

## Prevent Clickjacking

`iframe`s make everything difficult. One of the simplest possible attacks is to drop your content into an `iframe` and snoop the interaction. It's not always malicious; some people always try to embed things (still, in 2017) so they can do their own thing. `X-Frame-Options` gives you `iframe` control in user agents that support it.

### Nginx

{{
    highlight_block("""\
add_header X-Frame-Options DENY;
""",
        explicit_lexer_name = 'NginxConfLexer',
        no_header = True
    )
}}

### Apache

{{
    highlight_block("""\
Header always X-Frame-Options \"DENY\"
""",
        explicit_lexer_name = 'ApacheConfLexer',
        no_header = True
    )
}}

## Primary Header Config Redux

### Nginx

{{
    highlight_block("""\
# Initially empty
""",
        explicit_lexer_name = 'NginxConfLexer',
        title = '/etc/nginx/common/ssl-headers.conf'
    )
}}


### Apache

For the `n`th time, I'd like to reiterate that I haven't actually tested this config. I will. Eventually.

{{
    highlight_block("""\
# Initially empty
""",
        explicit_lexer_name = 'ApacheConfLexer',
        title = '/etc/httpd/common/ssl-headers.conf'
    )
}}

{% endblock %}
